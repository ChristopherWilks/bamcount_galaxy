<tool id="bamcount" name="Summarize coverage from a BAM (bamcount)" version="0.2.0">
    <requirements>
        <requirement type="package" version="0.4.0">bamcount</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        bamcount "$input1" --threads $threads --coverage --no-head --min-unique-qual $min_uniq_qual --frag-dist bc --bigwig bc --auc bc --alts bc --junctions bc
    ]]></command>
    <inputs>
        <param type="integer" name="threads" value="1" />
        <param type="integer" name="min_uniq_qual" value="10" />
        <param type="file" name="input1" format="bam" />
        <param type="file" name="annotation" format="bed" />
    </inputs>
    <outputs>
        <data name="output1" format="txt" from_work_dir="bc.auc.tsv" />
        <data name="output2" format="txt" from_work_dir="bc.alts.tsv" />
        <data name="output3" format="txt" from_work_dir="bc.frags.tsv" />
        <data name="output4" format="txt" from_work_dir="bc.jxs.tsv" />
        <!--
        <data name="output5" format="bed" from_work_dir="bc.all.tsv" />
        <data name="output6" format="bed" from_work_dir="bc.unique.tsv" />
        -->
        <data name="output7" format="bigwig" from_work_dir="bc.all.bw" />
        <data name="output8" format="bigwig" from_work_dir="bc.unique.bw" />
    </outputs>
    <tests>
        <test>
            <param name="input1" value="test.bam"/>
            <output name="output1" file="test.auc.tsv"/>
        </test>
    </tests>
    <help><![CDATA[
bamcount 0.4.0

BAM and BigWig utility.

Usage:
  bamcount <bam> [options]

Options:
  -h --help            Show this screen.
  --version            Show version.
  --threads            # of threads to do BAM decompression

Extract basic junction information from the BAM, including co-occurrence
  --junctions <prefix> Extract jx coordinates, strand, and anchor length, per read
                       Writes to a TSV file <prefix>.jxs.tsv

Extract reads from BAM into FASTQ (exclusive of all other modes):
  --bam2fastq <prefix> Extract all reads from the passed in BAM and output as FASTQs
                       Uses prefix to name the fastq(s)
  --filter-out         SAM bit flags to filter out
  --filter-in          SAM bit flags to filter in
  --re-reverse         If read is reversed in alignment, re-reverse it in output
  --one-file           If you know file is not paired or just want all reads in one file

Non-reference summaries:
  --alts <prefix>              Print differing from ref per-base coverages
                               Writes to a CSV file <prefix>.alts.tsv
  --include-softclip <prefix>  Print a record to the alts CSV for soft-clipped bases
                               Writes total counts to a separate TSV file <prefix>.softclip.tsv
  --only-polya                 If --include-softclip, only print softclips which are mostly A's or T's
  --include-n                  Print mismatch records when mismatched read base is N
  --print-qual                 Print quality values for mismatched bases
  --delta                      Print POS field as +/- delta from previous
  --require-mdz                Quit with error unless MD:Z field exists everywhere it's
                               expected
  --no-head                    Don't print sequence names and lengths in header

Coverage and quantification:
  --coverage           Print per-base coverage (slow but totally worth it)
  --auc <prefix>       Print per-base area-under-coverage, will generate it for the genome
                       and for the annotation if --annotation is also passed in
                       Writes to a TSV file <prefix>.auc.tsv
  --bigwig <prefix>    Output coverage as BigWig file(s).  Writes to <prefix>.all.bw
                       (also <prefix>.unique.bw when --min-unique-qual is specified).
                       Requires libBigWig.
  --annotation <bed> <prefix>
                       Path to BED file containing list of regions to sum coverage over
                       (tab-delimited: chrm,start,end)
  --keep-bam-order     Output annotation coverage in the order chromosomes appear in the BAM file.
                       The default is to output annotation coverage in the order chromosomes appear in the BED file.
  --min-unique-qual <int>
                       Output second bigWig consisting built only from alignments
                       with at least this mapping quality.  --bigwig must be specified.
                       Also produces second set of annotation sums based on this coverage
                       if --annotation is enabled
  --double-count       Allow overlapping ends of PE read to count twice toward
                       coverage
  --num-bases          Report total sum of bases in alignments processed (that pass filters)

Other outputs:
  --read-ends          Print counts of read starts/ends, if --min-unique-qual is set
                       then only the alignments that pass that filter will be counted here
                       Writes to 2 TSV files: <prefix>.starts.tsv, <prefix>.ends.tsv
  --frag-dist <prefix> Print fragment length distribution across the genome
                       Writes to a TSV file <prefix>.frags.tsv
  --echo-sam           Print a SAM record for each aligned read
  --ends               Report end coordinate for each read (useful for debugging)
  --test-polya         Lower Poly-A filter minimums for testing (only useful for debugging/testing)
  ]]></help>
    <citations>
        <citation type="bibtex">
  @misc{githubbamcount,
  author = {Wilks, Christopher},
  year = {2019},
  title = {bamcount},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/ChristopherWilks/bamcount},
}</citation>
    </citations>
</tool>
